name: Deploy infrastructure

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Set Azure Credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Set AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: terraform/
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform/
        run: terraform apply -auto-approve -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" -var="client_id=${{ secrets.AZURE_CLIENT_ID }}"

      - name: Get Terraform Outputs
        id: tf_outputs
        working-directory: terraform/
        run: |
          echo "aks_host=$(terraform output -raw aks_host)" >> $GITHUB_OUTPUT
          echo "aks_client_certificate=$(terraform output -raw aks_client_certificate)" >> $GITHUB_OUTPUT
          echo "aks_client_key=$(terraform output -raw aks_client_key)" >> $GITHUB_OUTPUT
          echo "aks_cluster_ca_certificate=$(terraform output -raw aks_cluster_ca_certificate)" >> $GITHUB_OUTPUT
          echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT

          echo "acr_name=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
          echo "acr_admin_username=$(terraform output -raw acr_admin_username)" >> $GITHUB_OUTPUT
          echo "acr_admin_password=$(terraform output -raw acr_admin_password)" >> $GITHUB_OUTPUT
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.CREDS }}
          auth-type: SERVICE_PRINCIPAL

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.GH_PAT }}" | gh auth login --with-token

      - name: Set Organization Secrets for multiple repositories
        run: |
            gh secret set ACR_NAME --org microservices-final-project -b "${{ steps.tf_outputs.outputs.acr_name }}" --visibility "all"    
            gh secret set ACR_USERNAME --org microservices-final-project -b "${{ steps.tf_outputs.outputs.acr_admin_username }}" --visibility "all" 
            gh secret set ACR_PASSWORD --org microservices-final-project -b "${{ steps.tf_outputs.outputs.acr_admin_password }}" --visibility "all"       
            gh secret set RESOURCE_GROUP --org microservices-final-project -b "${{ steps.tf_outputs.outputs.resource_group_name }}" --visibility "all"       

      - name: Trigger workflows and wait for completion
        run: |
          repos=("service-discovery" "cloud-config" "api-gateway" "proxy-client" "order-service" "payment-service" "product-service" "shipping-service" "user-service" "favourite-service")
          declare -A run_ids

          # Step 1: Trigger workflows and collect run IDs
          for repo in "${repos[@]}"; do
            echo "üöÄ Triggering build.yml in $repo..."
            gh workflow run build.yml \
              --ref main \
              --repo microservices-final-project/$repo

            # Small delay to allow the run to register
            sleep 5

            # Get the latest run ID for build.yml
            run_id=$(gh run list \
              --repo microservices-final-project/$repo \
              --workflow=build.yml \
              --branch=main \
              --limit 1 \
              --json databaseId \
              --jq '.[0].databaseId')

            if [[ -n "$run_id" ]]; then
              run_ids[$repo]=$run_id
              echo "‚úÖ $repo run ID: $run_id"
            else
              echo "‚ùå Could not get run ID for $repo"
            fi
          done

          echo ""
          echo "‚è≥ Waiting for workflows to complete..."
          all_done=false

          # Step 2: Poll until all runs are completed
          while [ "$all_done" == "false" ]; do
            all_done=true
            for repo in "${!run_ids[@]}"; do
              run_id=${run_ids[$repo]}
              status=$(gh run view "$run_id" \
                --repo microservices-final-project/$repo \
                --json status,conclusion \
                --jq '.status')

              if [[ "$status" != "completed" ]]; then
                echo "‚è±Ô∏è  $repo is still running..."
                all_done=false
              else
                conclusion=$(gh run view "$run_id" \
                  --repo microservices-final-project/$repo \
                  --json status,conclusion \
                  --jq '.conclusion')
                echo "‚úÖ $repo finished with status: $conclusion"
              fi
            done

            if [ "$all_done" == "false" ]; then
              echo "üîÅ Waiting 15s before next check..."
              sleep 15
            fi
          done

          echo "üéâ All workflows completed."

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Set up kubectl with AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ steps.tf_outputs.outputs.resource_group_name }} --name ${{ steps.tf_outputs.outputs.aks_cluster_name }} --overwrite-existing

      - name: Attach ACR to AKS
        run: |
          az aks update \
            --resource-group ${{ steps.tf_outputs.outputs.resource_group_name }} \
            --name ${{ steps.tf_outputs.outputs.aks_cluster_name }} \
            --attach-acr ${{ steps.tf_outputs.outputs.acr_name }}

      - name: Deploy Zipkin, Service Discovery, and Cloud Config
        run: |
          export ACR_NAME={{ steps.tf_outputs.outputs.acr_name }}

          for file in zipkin.yaml service-discovery.yaml cloud-config.yaml; do
            envsubst < ./k8s/dev/$file | kubectl apply -f -
          done

          echo "‚è≥ Esperando a que los servicios iniciales est√©n listos..."
          sleep 60

      - name: Deploy Remaining Services
        run: |
          export ACR_NAME=${{ steps.tf_outputs.outputs.acr_name }}

          for file in ./k8s/dev/*.yaml; do
            if [[ "$file" != *"zipkin.yaml" && "$file" != *"service-discovery.yaml" && "$file" != *"cloud-config.yaml" ]]; then
              envsubst < "$file" | kubectl apply -f -
            fi
          done
